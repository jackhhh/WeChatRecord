                            APPLICATIONS

THE MODEL

   1. Original Fields

      id (the primary key),
      official_account, user_submit, operator_admin, reject_reason,
      manager_name, manager_student_id, manager_dept, manager_tel,
      manager_email, association, status

      The fields, except "official_account", which is a foreign key, are
      all char fields. See database/models.py for their length limits.

      See THE STATUS for more on the status field.

   2. Auto-Generated Fields

      official_account_id

      This field is the primary key of its official_account.

   3. Fake-Fields

      name, description

      These fields are actually functions which returns the respective
      field of its official_account. Normally one only use them in
      django templates - there they can be used as if they were normal
      attributes.

THE STATUS

   1. Possible Values

      The status field should contain one of the following string
      literals:

         "approved",
         "rejected",
         "pending",
         "not_submitted"

   2. Status Transition and Results

      A new application can be created with either "not_submitted" or
      "pending" state. Only an application which is in "not_submitted"
      state can be edited or deleted. Only an application which is in
      "pending" state can be recalled. Only an application which is in
      "pending" state can be viewed, rejected, or approved by
      administrators.

      An application in "rejected" or "approved" state has a non-blank
      "operator_admin" value, otherwise the field should be an empty
      string.

ACCESSING THE APPLICATIONS

   1. database.backend Functions

      get_applications(),
      get_applications_by_status(status),
      get_pending_applications(),
      get_applications_by_user(username),
      get_applications_by_admin(username),
      get_application_by_id(id)

      I hope their names are clear enough. See database/backend.py for
      details in case of anything goes wrong.

   2. Backend API Urls

      2a.

         api/submit_application,
         api/student_modify_application

         Students submit and modify applications through these two API. The
         POST request should contain a "method" value (either "submit" or
         "save") indicating if the user is submitting or saving the
         application. When modifying, an "id" value containing the id of
         the application to be modified should be included as well.

         POST requesting these two urls should get a JSON response. The
         response is in the form

            { "status": "ok", "submit_method": method }

         where method is either "save" or "submit", in case no error
         occured, and

            { "status': "error", "submit_method": method, { "field_name":
            "error_message", ... } }

         containing all the field names for which validating failed, and
         corresponding error messages generated by Django.

      2b.

         api/modify_application

         Administrator approve or reject applications through this API.
         Values "operator_admin" and "status" are written to the
         application with id "id". If the action is a rejection,
         "reject_reason" parameter is mandatory.

      2c.

         api/delete_application/id,
         api/recall_application/id

         They simply do what their names say.
